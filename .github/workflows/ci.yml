name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
        tags: ["v*"]
    pull_request:
        branches: [main, develop]

env:
    GO_VERSION: "1.21"

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Verify dependencies
              run: go mod verify

            - name: Run tests
              run: go test -v -race -coverprofile=coverage.out ./...

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.out
                  flags: unittests
                  name: codecov-umbrella

    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: golangci-lint
              uses: golangci/golangci-lint-action@v3
              with:
                  version: latest
                  args: --timeout=5m

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run Gosec Security Scanner
              uses: securego/gosec@master
              with:
                  args: "./..."

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: [test, lint]
        strategy:
            matrix:
                goos: [linux, windows, darwin]
                goarch: [amd64, arm64]
                exclude:
                    # Windows ARM64 is not commonly used
                    - goos: windows
                      goarch: arm64
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Build binary
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
              run: |
                  mkdir -p dist
                  BINARY_NAME=commit-ai-${{ matrix.goos }}-${{ matrix.goarch }}
                  if [ "${{ matrix.goos }}" = "windows" ]; then
                    BINARY_NAME="${BINARY_NAME}.exe"
                  fi
                  go build -ldflags="-s -w" -o dist/${BINARY_NAME} ./cmd

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
                  path: dist/

    release:
        name: Release
        runs-on: ubuntu-latest
        needs: [build]
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Download all artifacts
              uses: actions/download-artifact@v3

            - name: Prepare release assets
              run: |
                  mkdir -p release
                  for dir in binaries-*; do
                    if [ -d "$dir" ]; then
                      cp "$dir"/* release/
                    fi
                  done
                  ls -la release/

            - name: Generate changelog
              run: |
                  echo "## What's Changed" > CHANGELOG.md
                  git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: release/*
                  body_path: CHANGELOG.md
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    docker:
        name: Docker Build and Push
        runs-on: ubuntu-latest
        needs: [test, lint]
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: nseba/commit-ai
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64,linux/arm64

    homebrew:
        name: Update Homebrew Formula
        runs-on: ubuntu-latest
        needs: [release]
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - name: Update Homebrew formula
              uses: dawidd6/action-homebrew-bump-formula@v3
              with:
                  token: ${{ secrets.HOMEBREW_TOKEN }}
                  formula: commit-ai
                  tap: nseba/homebrew-tools
